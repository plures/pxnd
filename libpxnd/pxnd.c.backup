
static bool pxnd_free(
    ndt_context_t *ctx,
    PlasmaClient client,
    ObjectID object_id)
    {
        if (!status_ok(plasmaClient_release(client, object_id))) {
            ndt_err_format(ctx, NDT_RuntimeError,
                           "pxnd_free: failed to release plasma object");
            return false;
        }
        return true;
    }

// modified from xnd_new
static char *
pxnd_new(
    const ndt_t *t,
    const uint32_t flags,
    ndt_context_t *ctx,
    PlasmaClient client,
    ObjectID object_id)
{
    xnd_t x;

    if (ndt_is_abstract(t))
    {
        ndt_err_format(ctx, NDT_ValueError,
                       "cannot create xnd container from abstract type");
        return NULL;
    }

    x.index = 0;
    x.type = t;

    x.ptr = pxnd_alloc(
        t->datasize,
        ndt_as_string(t, ctx),
        ctx,
        client,
        object_id);
    if (x.ptr == NULL)
    {
        // TOOD: switch to plasma error
        ndt_memory_error(ctx);
        return NULL;
    }

    if (xnd_init(x, flags, ctx) < 0)
    {
        if (!status_ok(plasmaClient_abort(client, object_id)))
        {
            ndt_err_format(ctx, NDT_RuntimeError,
                           "pxnd_new: failed to abort plasma object");
        }
        return NULL;
    }

    return x.ptr;
}

// modified from xnd_empty_from_type
xnd_master_t *pxnd_create(
    const ndt_t *t,
    uint32_t flags,
    ndt_context_t *ctx,
    PlasmaClient client,
    ObjectID object_id)
{
    xnd_bitmap_t b = {.data = NULL, .size = 0, .next = NULL};
    xnd_master_t *x;
    char *ptr;

    if (flags & XND_OWN_TYPE)
    {
        ndt_err_format(ctx, NDT_InvalidArgumentError,
                       "pxnd_create: XND_OWN_TYPE must not be set");
        return NULL;
    }

    if (!ndt_is_concrete(t))
    {
        ndt_err_format(ctx, NDT_ValueError, "type must be concrete");
        return NULL;
    }

    x = ndt_alloc(1, sizeof *x);
    if (x == NULL)
    {
        return ndt_memory_error(ctx);
    }

    if (xnd_bitmap_init(&b, t, ctx) < 0)
    {
        ndt_free(x);
        return NULL;
    }

    ptr = pxnd_new(t, flags, ctx, client, object_id);
    if (ptr == NULL)
    {
        xnd_bitmap_clear(&b);
        ndt_free(x);
        return NULL;
    }

    x->flags = flags;
    x->master.bitmap = b;
    x->master.index = 0;
    x->master.type = t;
    x->master.ptr = ptr;

    return x;
}
